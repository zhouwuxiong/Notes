## 
```python
class subprocess.Popen( args,  # 执行的shell命令（可以是字符串或则参数列表）
  bufsize=0,    # 0表示不缓冲，1表示行缓冲，其他正数表示近似的缓冲区字节数，负数表示使用系统默认值。默认是0。
  executable=None,  # 指定要执行的程序。它很少会被用到：一般程序可以由args 参数指定。如果shell=True ，executable 可以用于指定用哪个shell来执行（比如bash、csh、zsh等）。*nix下，默认是 /bin/sh
  stdin=None, 
  stdout=None, 
  stderr=None,  # 是否进行重定向。可选的值有PIPE或者一个有效的文件描述符（其实是个正整数）或者一个文件对象，还有None。如果是None，会继承父进程的。 
  preexec_fn=None,  # 在子进程执行前被调用的函数（仅限*nix）。注意是调用前，可以在函数中进行共享资源的分配工作 
  close_fds=False,  # 是否关闭除了0、1、2以外的文件描述符
  shell=False, # 在shell中解释执行命令
  cwd=None, # 子程序的当前目录
  env=None, # None-继承父进程的环境变量。注意，即使你只在env里定义了某一个环境变量的值，也会阻止子程序得到其他的父进程的环境变量
  universal_newlines=False, # 如果把universal_newlines 设置成True，则子进程的stdout和stderr被视为文本对象，并且不管是*nix的行结束符（'/n'），还是老mac格式的行结束符（'/r' ），还是windows 格式的行结束符（'/r/n' ）都将被视为 '/n' 
  startupinfo=None, 
  creationflags=0 # 如果指定了startupinfo和creationflags，将会被传递给后面的CreateProcess()函数，用于指定子程序的各种其他属性，比如主窗口样式或者是子进程的优先级等。（仅限Windows）
  )
```
## subprocess.PIPE
一个可以被用于Popen的stdin 、stdout 和stderr 3个参数的特输值，表示需要创建一个新的管道。
```python
>>>p=subprocess.Popen("df -h",shell=True,stdout=subprocess.PIPE)
>>>out=p.stdout.readlines() # stdout可以使用read(),readline(),readlines()等方法
```
## 其他函数
### subprocess.call
执行命令，并等待命令结束，再返回子进程的返回值。参数同Popen。

### subprocess.check_call
执行上面的call命令，并检查返回值，如果子进程返回非0，则会抛出CalledProcessError异常，这个异常会有个returncode属性，记录子进程的返回值。

### check_output

## Popen对象
### 属性
1. Popen.pid
2. Popen.stdin
3. Popen.stdout
4. Popen.stderr
5. Popen.arg
6. Popen.returncode

### Popen.poll()
检查子进程是否已结束

### Popen.wait()

等待子进程结束
**注意：** 
如果子进程输出了大量数据到stdout或者stderr的管道，并达到了系统pipe的缓存大小的话，子进程会等待父进程读取管道，而父进程此时正wait着的话，将会产生传说中的**死锁**。建议使用communicate() 来避免这种情况的发生,这个方法会把输出放在内存，而不是管道里。可通过`ulimit -a`命令查看`pipe size`的大小。默认是4KB

### Popen.send_signal(signal)
给子进程发送signal信号。

### Popen.communicate()
和子进程交互：发送数据到stdin，并从stdout和stderr读数据，直到收到EOF。等待子进程结束。
```python
Popen.communicate(input=None)
```
### Popen.terminate()
Stop the child，sends SIGTERM to the child

### Popen.kill()
Kills the child，sends SIGTERM to the child

**注意：**
读到的数据会被缓存在内存里

## 其它
### shlex.split()
解析命令行的参数


## 参考
[python中的subprocess.Popen()使用详解---以及注意的问题（死锁）](https://www.cnblogs.com/lgj8/p/12132829.html)