## 数据类型
### 数据对象类
- Frame
  摄像头捕获的普通帧
- KeyFrame
- MapPoint
- Map
- KeyFrame Database

    - 每一个送入系统的视频帧都会构造一个 Frame
    - Frame 中比较重要的会设为 KeyFrame
    - 每个 Frame 会提取很多 ORB 特征点（FeaturePoint），每一个 ORB 特征点可能会对应一个 MapPoint
    - 同一个 MapPoint 会对应多个不同 Frame 中 ORB 特征
    - KeyFrames 和 MapPoints 构成了 Map
    - 重要的 KeyFrame 会存入 KeyFrame Database，用于回环检测和重定位

### 状态变量/控制变量
- mState
- 
#### mstate
  tracking线程相当于系统的主线程，所有的输入图像都先通过tracking线程进行处理，生成KeyFrame，mState记录了tracking线程的跟踪状态。
```C++
    // Tracking states
    enum eTrackingState{
        SYSTEM_NOT_READY=-1,
        NO_IMAGES_YET=0,    //没有检测到图像输入
        NOT_INITIALIZED=1,
        OK=2,   
        LOST=3  //三种模式都跟踪失败
    };
```
- mbVO
  在定位模式中，如果没有足够的地图点进行定位，则使用临时点根据视觉几何进行重定位。

### Covisibility Graph
共视图的节点为所有`KeyFrames`，当KF之间的能观测到的共同`MapPoints`大于15个时，KeyFrames之间相连，边的权重为共同观测到的MapPoints数目。
```C++
    //KeyFrame.h
    // Grid over the image to speed up feature matching
    std::vector< std::vector <std::vector<size_t> > > mGrid;

    std::map<KeyFrame*,int> mConnectedKeyFrameWeights;
    std::vector<KeyFrame*> mvpOrderedConnectedKeyFrames;
    std::vector<int> mvOrderedWeights;
```
### Spanning Tree
当插入新的KeyFrame时， 将它与共视MapPoints最多的KF相连，作为其父节点，从而得到一个生成树。
```C++
    // Spanning Tree and Loop Edges
    bool mbFirstConnection;
    KeyFrame* mpParent;
    std::set<KeyFrame*> mspChildrens;
    std::set<KeyFrame*> mspLoopEdges;
```

### Essential Graph
Essential Graph = 该生成树 + Covisibility Graph 中权重大于100的边。

提出 Covisiblility Graph 的目的是以此来描述 KFs 之间的共视关系。但 Covisibility Graph 较为稠密，不便于全局优化，所以提出了 Essential Graph。Spanning Tree则是一条树状的线

### LocalMap
1. LocalKeyFrames
   - 能观测到当前关键帧MapPoint的关键帧作为局部关键帧
   - 局部关键帧的最佳共视10帧中选择一个关键帧
   - 局部关键帧的一个子关键帧和父关键帧
2. LocalMapPoints
   LocalKeyFrames中观测到的所有地图点
3. 
和当前帧有共同观察到的 MapPoints 的 KFs，从 Covisibility Graph 中得到

### 其它
- 参考关键帧
  与当当前帧共视程度最高的帧